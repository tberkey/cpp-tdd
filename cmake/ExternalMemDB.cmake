get_filename_component(_self_dir "${CMAKE_CURRENT_LIST_FILE}" PATH)

message(STATUS "****************************************************************************************")
message(STATUS "Start Configuring ${MEMDB_PROJECT} External Project")

set(LIBRARY_NAME_DEBUG_POSTFIX          "")
set(LIBRARY_NAME_RELEASE_POSTFIX        "")
set(LIBRARY_NAME_RELWITHDEBINFO_POSTFIX "")

set(OUTPUT_PATH_DEBUG           "Debug")
set(OUTPUT_PATH_RELEASE         "Release")
set(OUTPUT_PATH_RELWITHDEBINFO  "RelWithDebInfo")

if(CMAKE_BUILD_TOOL MATCHES MSBuild)
    set(LIBRARY_DIRS_HINT ${LIBRARY_OUTPUT_PATH})
else()
    set(LIBRARY_DIRS_HINT ${LIBRARY_OUTPUT_PATH}/${CMAKE_BUILD_TYPE})
endif()

set(EXTERNAL_INCLUDE_DIRS ${ZEROMQ_INCLUDES} ${CZMQ_INCLUDES})

set(MEMDB_CMAKE_CXX_FLAGS "${CZMQ_CMAKE_CXX_FLAGS} -DZMQ_STATIC")
set(MEMDB_CMAKE_CXX_FLAGS "${CZMQ_CMAKE_CXX_FLAGS} -DLIBCZMQ_STATIC")
set(MEMDB_CMAKE_CXX_FLAGS "${CZMQ_CMAKE_CXX_FLAGS} -DLIBMEMDB_STATIC")

ExternalProject_Add("${MEMDB_PROJECT}"
  DEPENDS "${ZEROMQ_PROJECT}" "${CZMQ_PROJECT}"
  GIT_REPOSITORY "${memdb_git_repository}"
  GIT_TAG "${memdb_git_tag}"
  INSTALL_COMMAND ""
  BUILD_IN_SOURCE 0
  CMAKE_ARGS
    -DBUILD_SHARED_LIBS:BOOL="${BUILD_SHARED_LIBS}"
    -DDEBUG_CMAKE:BOOL=ON
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_CXX_FLAGS=${MEMDB_CMAKE_CXX_FLAGS}
    -DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG}
    -DCMAKE_CXX_FLAGS_RELEASE=${CMAKE_CXX_FLAGS_RELEASE}
    -DCMAKE_CXX_FLAGS_RELWITHDEBINFO=${CMAKE_CXX_FLAGS_RELWITHDEBINFO}
    -DLIBRARY_OUTPUT_PATH:PATH=${LIBRARY_DIRS_HINT}
    -DEXECUTABLE_OUTPUT_PATH:PATH=${EXECUTABLE_OUTPUT_PATH}
    -DZEROMQ_EXTERNAL_INCLUDE_DIRS=${ZEROMQ_INCLUDES}
    -DCZMQ_EXTERNAL_INCLUDE_DIRS=${CZMQ_INCLUDES}
    -DEXTERNAL_LIBRARY_DIRS=${LIBRARY_DIRS_HINT}/$(ConfigurationName)
  )

if (DEBUG_CMAKE)
    message("")
    message(STATUS "Start Debug - ${MEMDB_PROJECT}")
    message(STATUS "  CMAKE_ARGS")
    message(STATUS "    -DBUILD_SHARED_LIBS:BOOL=${BUILD_SHARED_LIBS}")
    message(STATUS "    -DDEBUG_CMAKE:BOOL=ON")
    message(STATUS "    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
    message(STATUS "    -DCMAKE_CXX_FLAGS=${MEMDB_CMAKE_CXX_FLAGS}")
    message(STATUS "    -DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG}")
    message(STATUS "    -DCMAKE_CXX_FLAGS_RELEASE=${CMAKE_CXX_FLAGS_RELEASE}")
    message(STATUS "    -DCMAKE_CXX_FLAGS_RELWITHDEBINFO=${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
    message(STATUS "    -DLIBRARY_OUTPUT_PATH:PATH=${LIBRARY_OUTPUT_PATH}")
    message(STATUS "    -DEXECUTABLE_OUTPUT_PATH:PATH=${LIBRARY_DIRS_HINT}")
    message(STATUS "    -DZEROMQ_INCLUDE_DIRS=${ZEROMQ_INCLUDES}")
    message(STATUS "    -DCZMQ_INCLUDE_DIRS=${CZMQ_INCLUDES}")
    message(STATUS "    -DEXTERNAL_LIBRARY_DIRS=${LIBRARY_DIRS_HINT}/$(ConfigurationName)")
    message(STATUS "End Debug - ${MEMDB_PROJECT} - CMAKE_ARGS")
    message("")
endif()

set_target_properties("${MEMDB_PROJECT}" PROPERTIES FOLDER "External Libraries" )
  
#
# Specify include directory
#
ExternalProject_Get_Property("${MEMDB_PROJECT}" SOURCE_DIR)
set("memdb_include_dir" "${SOURCE_DIR}/include" CACHE STRING "Include directory for ${memdb_library}.")
set(MEMDB_INCLUDE_DIR ${memdb_include_dir} CACHE STRING "Include directories for ${memdb_library}.")
set(MEMDB_INCLUDES    ${memdb_include_dir} ${CZMQ_INCLUDES} CACHE STRING "Include directories for ${memdb_library}, including prerequisite libraries.")

#
# Specify the library
#
ExternalProject_Get_Property("${MEMDB_PROJECT}" BINARY_DIR)
set(MEMDB_LIBRARY_PATH_DEBUG          "${CMAKE_BINARY_DIR}/${LIB_OUTPUT_DIRECTORY}/${OUTPUT_PATH_DEBUG}")
set(MEMDB_LIBRARY_PATH_RELEASE        "${CMAKE_BINARY_DIR}/${LIB_OUTPUT_DIRECTORY}/${OUTPUT_PATH_RELEASE}")
set(MEMDB_LIBRARY_PATH_RELWITHDEBINFO "${CMAKE_BINARY_DIR}/${LIB_OUTPUT_DIRECTORY}/${OUTPUT_PATH_RELWITHDEBINFO}")
set(MEMDB_LIBRARY_DEBUG               "${CMAKE_FIND_LIBRARY_PREFIXES}${MEMDB_PROJECT}${LIBRARY_NAME_DEBUG_POSTFIX}")
set(MEMDB_LIBRARY_RELEASE             "${CMAKE_FIND_LIBRARY_PREFIXES}${MEMDB_PROJECT}${LIBRARY_NAME_RELEASE_POSTFIX}")
set(MEMDB_LIBRARY_RELWITHDEBINFO      "${CMAKE_FIND_LIBRARY_PREFIXES}${MEMDB_PROJECT}${LIBRARY_NAME_RELWITHDEBINFO_POSTFIX}")

# add the libraries to global scope and per configuration location to be linked
add_library(MEMDB_LIBRARIES STATIC IMPORTED GLOBAL)
set_target_properties(MEMDB_LIBRARIES PROPERTIES IMPORTED_LOCATION_DEBUG          "${MEMDB_LIBRARY_PATH_DEBUG}/${MEMDB_LIBRARY_DEBUG}${CMAKE_STATIC_LIBRARY_SUFFIX}")
set_target_properties(MEMDB_LIBRARIES PROPERTIES IMPORTED_LOCATION_RELEASE        "${MEMDB_LIBRARY_PATH_RELEASE}/${MEMDB_LIBRARY_RELEASE}${CMAKE_STATIC_LIBRARY_SUFFIX}")
set_target_properties(MEMDB_LIBRARIES PROPERTIES IMPORTED_LOCATION_RELWITHDEBINFO "${MEMDB_LIBRARY_PATH_RELWITHDEBINFO}/${MEMDB_LIBRARY_RELWITHDEBINFO}${CMAKE_STATIC_LIBRARY_SUFFIX}")

#add dependency so any project which includes library will automatically make MEMDB_PROJECT a dependency
add_dependencies(MEMDB_LIBRARIES "${MEMDB_PROJECT}")

if (DEBUG_CMAKE)
    message("")
    message(STATUS "Start Debug - ${MEMDB_PROJECT}")
    message(STATUS "  MEMDB_INCLUDE_DIR   - ${MEMDB_INCLUDE_DIR}")
    message(STATUS "  MEMDB_INCLUDES      - ${MEMDB_INCLUDES}")
    message(STATUS "  MEMDB_LIBRARIES     - ${MEMDB_LIBRARIES}")
    message(STATUS "    DEBUG             - ${MEMDB_LIBRARY_PATH_DEBUG}/${MEMDB_LIBRARY_DEBUG}${CMAKE_STATIC_LIBRARY_SUFFIX}")
    message(STATUS "    RELEASE           - ${MEMDB_LIBRARY_PATH_RELEASE}/${MEMDB_LIBRARY_RELEASE}${CMAKE_STATIC_LIBRARY_SUFFIX}")
    message(STATUS "    RELWITHDEBINFO    - ${MEMDB_LIBRARY_PATH_RELWITHDEBINFO}/${MEMDB_LIBRARY_RELWITHDEBINFO}${CMAKE_STATIC_LIBRARY_SUFFIX}")
    message(STATUS "End Debug - ${MEMDB_PROJECT}")
    message("")
endif()

message(STATUS "Finished Configuring ${MEMDB_PROJECT} External Project")
message(STATUS "****************************************************************************************")
