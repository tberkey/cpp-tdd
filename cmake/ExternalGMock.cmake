get_filename_component(_self_dir "${CMAKE_CURRENT_LIST_FILE}" PATH)

message(STATUS "****************************************************************************************")
message(STATUS "Start Configuring ${GMOCK_PROJECT} External Project")

if(CMAKE_BUILD_TOOL MATCHES MSBuild)
    set(OUTPUT_LIBRARY_DIR ${LIBRARY_OUTPUT_PATH})
else()
    set(OUTPUT_LIBRARY_DIR ${LIBRARY_OUTPUT_PATH}/${CMAKE_BUILD_TYPE})
endif()

ExternalProject_Add(${GMOCK_PROJECT}
  DOWNLOAD_DIR "${download_dir}"
  URL "${gmock_url}"
  URL_MD5 "${gmock_md5}"
  INSTALL_COMMAND ""
  BUILD_IN_SOURCE 0
  CMAKE_ARGS
    -DBUILD_SHARED_LIBS:BOOL=OFF
    -Dgmock_force_shared_crt:BOOL=ON
    -Dgtest_force_shared_crt:BOOL=ON
    -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}"
    -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
    -DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG}
    -DCMAKE_CXX_FLAGS_RELEASE=${CMAKE_CXX_FLAGS_RELEASE}
    -DCMAKE_CXX_FLAGS_RELWITHDEBINFO=${CMAKE_CXX_FLAGS_RELWITHDEBINFO}
    -DLIBRARY_OUTPUT_PATH:PATH=${OUTPUT_LIBRARY_DIR}
    -DEXECUTABLE_OUTPUT_PATH:PATH=${EXECUTABLE_OUTPUT_PATH}
  )

set_target_properties("${GMOCK_PROJECT}" PROPERTIES FOLDER "External Libraries" )

if(DEBUG_CMAKE)
    message(STATUS "  GMOCK Configuration")
    message(STATUS "    -DBUILD_SHARED_LIBS:BOOL=OFF")
    message(STATUS "    -Dgmock_force_shared_crt:BOOL=ON")
    message(STATUS "    -Dgtest_force_shared_crt:BOOL=ON")
    message(STATUS "    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
    message(STATUS "    -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}")
    message(STATUS "    -DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG}")
    message(STATUS "    -DCMAKE_CXX_FLAGS_RELEASE=${CMAKE_CXX_FLAGS_RELEASE}")
    message(STATUS "    -DCMAKE_CXX_FLAGS_RELWITHDEBINFO=${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
    message(STATUS "    -DLIBRARY_OUTPUT_PATH_DEBUG:PATH=${OUTPUT_LIBRARY_DIR}")
    message(STATUS "    -DEXECUTABLE_OUTPUT_PATH_DEBUG:PATH=${EXECUTABLE_OUTPUT}/${OUTPUT_PATH}")
    message(STATUS "")
endif()
  
#
# Specify include directory
#
ExternalProject_Get_Property("${GMOCK_PROJECT}" SOURCE_DIR)
set(gtest_library "GTest")
set("gtest_include_dir" "${SOURCE_DIR}/gtest/include" CACHE STRING "Include directory for ${gtest_library}.")
set(GTEST_INCLUDE_DIR ${gtest_include_dir} CACHE STRING "Include directories for ${gtest_library}.")
set(GTEST_INCLUDES ${gtest_include_dir} CACHE STRING "Include directories for ${gtest_library}, including prerequisite libraries.")

set("gmock_include_dir" "${SOURCE_DIR}/include" CACHE STRING "Include directory for ${gmock_library}.")
set(GMOCK_INCLUDE_DIR ${gmock_include_dir} CACHE STRING "Include directories for ${gmock_library}.")
set(GMOCK_INCLUDES ${gtest_include_dir} ${gmock_include_dir} CACHE STRING "Include directories for ${gmock_library}, including prerequisite libraries.")

#
# Specify the library
#
ExternalProject_Get_Property("${GMOCK_PROJECT}" BINARY_DIR)
set(GMOCK_LIBRARY_PATH_DEBUG          "${CMAKE_BINARY_DIR}/${LIB_OUTPUT_DIRECTORY}/Debug")
set(GMOCK_LIBRARY_PATH_RELEASE        "${CMAKE_BINARY_DIR}/${LIB_OUTPUT_DIRECTORY}/Release")
set(GMOCK_LIBRARY_PATH_RELWITHDEBINFO "${CMAKE_BINARY_DIR}/${LIB_OUTPUT_DIRECTORY}/RelWithDebInfo")

set(GMOCK_LIBRARY_DEBUG               "${CMAKE_FIND_LIBRARY_PREFIXES}${GMOCK_PROJECT}${LIBRARY_NAME_DEBUG_POSTFIX}")
set(GMOCK_LIBRARY_RELEASE             "${CMAKE_FIND_LIBRARY_PREFIXES}${GMOCK_PROJECT}${LIBRARY_NAME_RELEASE_POSTFIX}")
set(GMOCK_LIBRARY_RELWITHDEBINFO      "${CMAKE_FIND_LIBRARY_PREFIXES}${GMOCK_PROJECT}${LIBRARY_NAME_RELWITHDEBINFO_POSTFIX}")
set(GMOCK_LIBRARY_MAIN_DEBUG          "${CMAKE_FIND_LIBRARY_PREFIXES}gmock_main${LIBRARY_NAME_DEBUG_POSTFIX}")
set(GMOCK_LIBRARY_MAIN_RELEASE        "${CMAKE_FIND_LIBRARY_PREFIXES}gmock_main${LIBRARY_NAME_RELEASE_POSTFIX}")
set(GMOCK_LIBRARY_MAIN_RELWITHDEBINFO "${CMAKE_FIND_LIBRARY_PREFIXES}gmock_main${LIBRARY_NAME_RELWITHDEBINFO_POSTFIX}")
                    
set(GTEST_LIBRARY_DEBUG               "${CMAKE_FIND_LIBRARY_PREFIXES}gtest${LIBRARY_NAME_DEBUG_POSTFIX}")
set(GTEST_LIBRARY_RELEASE             "${CMAKE_FIND_LIBRARY_PREFIXES}gtest${LIBRARY_NAME_RELEASE_POSTFIX}")
set(GTEST_LIBRARY_RELWITHDEBINFO      "${CMAKE_FIND_LIBRARY_PREFIXES}gtest${LIBRARY_NAME_RELWITHDEBINFO_POSTFIX}")

# add the libraries to global scope and per configuration location to be linked
add_library(GTEST_LIBRARIES STATIC IMPORTED GLOBAL)
set(GTEST_LIBRARIES_DEBUG          "${GMOCK_LIBRARY_PATH_DEBUG}/${GTEST_LIBRARY_DEBUG}${CMAKE_STATIC_LIBRARY_SUFFIX}")
set(GTEST_LIBRARIES_RELEASE        "${GMOCK_LIBRARY_PATH_RELEASE}/${GTEST_LIBRARY_RELEASE}${CMAKE_STATIC_LIBRARY_SUFFIX}")
set(GTEST_LIBRARIES_RELWITHDEBINFO "${GMOCK_LIBRARY_PATH_RELWITHDEBINFO}/${GTEST_LIBRARY_RELWITHDEBINFO}${CMAKE_STATIC_LIBRARY_SUFFIX}")
set_target_properties(GTEST_LIBRARIES PROPERTIES IMPORTED_LOCATION_DEBUG          ${GTEST_LIBRARIES_DEBUG})
set_target_properties(GTEST_LIBRARIES PROPERTIES IMPORTED_LOCATION_RELEASE        ${GTEST_LIBRARIES_RELEASE})
set_target_properties(GTEST_LIBRARIES PROPERTIES IMPORTED_LOCATION_RELWITHDEBINFO ${GTEST_LIBRARIES_RELWITHDEBINFO})

add_library(GMOCK_LIBRARIES STATIC IMPORTED GLOBAL)
set(GMOCK_LIBRARIES_DEBUG          "${GMOCK_LIBRARY_PATH_DEBUG}/${GMOCK_LIBRARY_DEBUG}${CMAKE_STATIC_LIBRARY_SUFFIX}")
set(GMOCK_LIBRARIES_RELEASE        "${GMOCK_LIBRARY_PATH_RELEASE}/${GMOCK_LIBRARY_RELEASE}${CMAKE_STATIC_LIBRARY_SUFFIX}")
set(GMOCK_LIBRARIES_RELWITHDEBINFO "${GMOCK_LIBRARY_PATH_RELWITHDEBINFO}/${GMOCK_LIBRARY_RELWITHDEBINFO}${CMAKE_STATIC_LIBRARY_SUFFIX}")
set_target_properties(GMOCK_LIBRARIES PROPERTIES IMPORTED_LOCATION_DEBUG          ${GMOCK_LIBRARIES_DEBUG})
set_target_properties(GMOCK_LIBRARIES PROPERTIES IMPORTED_LOCATION_RELEASE        ${GMOCK_LIBRARIES_RELEASE})
set_target_properties(GMOCK_LIBRARIES PROPERTIES IMPORTED_LOCATION_RELWITHDEBINFO ${GMOCK_LIBRARIES_RELWITHDEBINFO})

add_library(GMOCK_MAIN_LIBRARIES STATIC IMPORTED GLOBAL)
set(GMOCK_MAIN_LIBRARIES_DEBUG          "${GMOCK_LIBRARY_PATH_DEBUG}/${GMOCK_LIBRARY_MAIN_DEBUG}${CMAKE_STATIC_LIBRARY_SUFFIX}")
set(GMOCK_MAIN_LIBRARIES_RELEASE        "${GMOCK_LIBRARY_PATH_RELEASE}/${GMOCK_LIBRARY_MAIN_RELEASE}${CMAKE_STATIC_LIBRARY_SUFFIX}")
set(GMOCK_MAIN_LIBRARIES_RELWITHDEBINFO "${GMOCK_LIBRARY_PATH_RELWITHDEBINFO}/${GMOCK_LIBRARY_MAIN_RELWITHDEBINFO}${CMAKE_STATIC_LIBRARY_SUFFIX}")
set_target_properties(GMOCK_MAIN_LIBRARIES PROPERTIES IMPORTED_LOCATION_DEBUG          ${GMOCK_MAIN_LIBRARIES_DEBUG})
set_target_properties(GMOCK_MAIN_LIBRARIES PROPERTIES IMPORTED_LOCATION_RELEASE        ${GMOCK_MAIN_LIBRARIES_RELEASE})
set_target_properties(GMOCK_MAIN_LIBRARIES PROPERTIES IMPORTED_LOCATION_RELWITHDEBINFO ${GMOCK_MAIN_LIBRARIES_RELWITHDEBINFO})

#add dependency so any project which includes library will automatically make GMOCK_PROJECT a dependency
add_dependencies(GTEST_LIBRARIES "${GMOCK_PROJECT}")
add_dependencies(GMOCK_LIBRARIES "${GMOCK_PROJECT}")

message(STATUS "")
message(STATUS "External Project ${GMOCK_PROJECT} Outputs:")
message(STATUS "  GTEST_INCLUDE_DIR    - ${GTEST_INCLUDE_DIR}")
message(STATUS "  GTEST_INCLUDES       - ${GTEST_INCLUDES}")
message(STATUS "  GTEST_LIBRARIES")
message(STATUS "    Debug              - ${GTEST_LIBRARIES_DEBUG}")
message(STATUS "    Release            - ${GTEST_LIBRARIES_RELEASE}")
message(STATUS "    RelWithDebInfo     - ${GTEST_LIBRARIES_RELWITHDEBINFO}")
message(STATUS "")
message(STATUS "  GMOCK_INCLUDE_DIR    - ${GMOCK_INCLUDE_DIR}")
message(STATUS "  GMOCK_INCLUDES       - ${GMOCK_INCLUDES}")
message(STATUS "  GMOCK_LIBRARIES")
message(STATUS "    Debug              - ${GMOCK_LIBRARIES_DEBUG}")
message(STATUS "    Release            - ${GMOCK_LIBRARIES_RELEASE}")
message(STATUS "    RelWithDebInfo     - ${GMOCK_LIBRARIES_RELWITHDEBINFO}")
message(STATUS "  GMOCK_MAIN_LIBRARIES")
message(STATUS "    Debug              - ${GMOCK_MAIN_LIBRARIES_DEBUG}")
message(STATUS "    Release            - ${GMOCK_MAIN_LIBRARIES_RELEASE}")
message(STATUS "    RelWithDebInfo     - ${GMOCK_MAIN_LIBRARIES_RELWITHDEBINFO}")
message(STATUS "")
message(STATUS "Finished Configuring ${GMOCK_PROJECT} External Project")
message(STATUS "****************************************************************************************")

